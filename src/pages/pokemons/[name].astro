---
import type { GetStaticPaths } from "astro";
import Layout from "../../layouts/Layout.astro";
import PokemonCard from "../../components/PokemonCard.astro";
import type { PokemonListResponse, PokemonDetailResponse, PokemonStat } from "../../interfaces/pokemon-list-response";


// Objeto de mapeo para traducir las estad√≠sticas al espa√±ol
const statTranslations: Record<string, string> = {
    hp: "‚ù§Ô∏è Puntos de salud",
    attack: "‚öîÔ∏è Ataque",
    defense: "üõ°Ô∏è Defensa",
    "special-attack": "üåü Ataque especial",
    "special-defense": "üßø Defensa especial",
    speed: "‚ö° Velocidad",
};

// Objeto de mapeo para traducir los tipos de Pok√©mon al espa√±ol y asignar emojis
const typeTranslations: Record<string, { name: string; emoji: string }> = {
    normal: { name: "Normal", emoji: "‚ö™" },
    fire: { name: "Fuego", emoji: "üî•" },
    water: { name: "Agua", emoji: "üíß" },
    grass: { name: "Planta", emoji: "üå±" },
    electric: { name: "El√©ctrico", emoji: "‚ö°" },
    ice: { name: "Hielo", emoji: "‚ùÑÔ∏è" },
    fighting: { name: "Lucha", emoji: "ü•ä" },
    poison: { name: "Veneno", emoji: "‚ò†Ô∏è" },
    ground: { name: "Tierra", emoji: "üåç" },
    flying: { name: "Volador", emoji: "üïäÔ∏è" },
    psychic: { name: "Ps√≠quico", emoji: "üîÆ" },
    bug: { name: "Bicho", emoji: "üêõ" },
    rock: { name: "Roca", emoji: "ü™®" },
    ghost: { name: "Fantasma", emoji: "üëª" },
    dragon: { name: "Drag√≥n", emoji: "üêâ" },
    dark: { name: "Siniestro", emoji: "üåë" },
    steel: { name: "Acero", emoji: "‚öôÔ∏è" },
    fairy: { name: "Hada", emoji: "‚ú®" },
};

// Funci√≥n para determinar la clase CSS seg√∫n el valor de la estad√≠stica
const getBarColor = (value: number): string => {
    if (value < 30) return "bg-red-500"; // Menor de 30: rojo
    if (value < 60) return "bg-yellow-500"; // Entre 30 y 60: amarillo
    if (value < 90) return "bg-green-500"; // Entre 60 y 90: verde
    return "bg-violet-500"; // Mayor o igual a 90: blanco
};

const resp = await fetch('https://pokeapi.co/api/v2/pokemon/?limit=151');
    const { results } = await resp.json() as PokemonListResponse;
    console.log(results);

export const getStaticPaths = (async () => {

    const resp = await fetch('https://pokeapi.co/api/v2/pokemon/?limit=151');
    const { results } = await resp.json() as PokemonListResponse;
    
    return results.map((pokemon) => ({
            params: {name: pokemon.name}, 
            props: {name: pokemon.name, url: pokemon.url},
        }
        ));
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url }  = Astro.props;

const id = url.split('/').at(-2);

// Hacer una solicitud para obtener las estad√≠sticas del Pok√©mon
const pokemonResp = await fetch(`https://pokeapi.co/api/v2/pokemon/${id}`);
const pokemonData = await pokemonResp.json() as PokemonDetailResponse;

// Extraer las estad√≠sticas del Pok√©mon
const stats = pokemonData.stats.map((stat) => ({
    name: statTranslations[stat.stat.name] || stat.stat.name,
    base: stat.base_stat,
}));

// Extraer y traducir los tipos del Pok√©mon
const types = pokemonData.types.map((type) => {
    const typeInfo = typeTranslations[type.type.name];
    return typeInfo ? `${typeInfo.emoji} ${typeInfo.name}` : type.type.name;
});

const imgSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
const nameCapitalized = name.charAt(0).toUpperCase() + name.slice(1);
---

<Layout title=`Pokemon | ${nameCapitalized}` description=`P√°gina de detalle del Pok√©mon ${name}` image={imgSrc}>
    <section class="flex flex-col ">
        
        <div>
            <a href="/" class="hover:underline hover:text-blue-500 mb-2">Volver</a>
            <h1 class="text-3xl mb-2 capitalize">#{id} {name}</h1>
            <hr class="mb-4"/>
        </div>

        <div class="flex justify-between">  
            <div>
        <PokemonCard name={name} url={url} isBig/>

         <!-- Mostrar los tipos del Pok√©mon -->
         <div class="my-4 justify-items-center">
            <h2 class="text-2xl mb-4 text-s font-extrabold">Tipos</h2>
            <ul class="flex gap-2">
                {types.map((type) => (
                    <li class="bg-slate-600 px-4 py-2 rounded-full text-2xl font-bold">
                        {type}
                    </li>
                ))}
            </ul>
        </div>
    </div>

        <!-- Traer las estadisticas y crear unas barras de estadisticas -->
        <!-- Mostrar las estad√≠sticas del Pok√©mon -->
        <div class="my-4 mb-10">
            <h2 class="text-2xl mt-9 mb-4 font-extrabold">Estad√≠sticas</h2>
            <ul>
                {stats.map((stat) => (
                    <li class="mb-2">
                        <span class="capitalize font-bold text-xl">{stat.name}:</span>
                        <span class="text-xl items-end">{stat.base}</span>
                        <div class="border-2 w-101 rounded-full border-gray-900">
                        <div class="w-100 bg-gray-300 rounded-full h-5">
                            <div
                                class={`h-5 rounded-full ${getBarColor(stat.base)}`}
                                style={`width: ${stat.base}%`}
                            ></div>
                        </div>
                    </div>
                    </li>
                ))}
            </ul>
        </div>
    </div>
    </section>
</Layout>
